package {{PACKAGE_NAME}}.util;

import {{PACKAGE_NAME}}.model.ConnectionConfig;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import java.sql.Connection;
import java.sql.SQLException;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class OracleConnectorTest {
    
    @Mock
    private ConnectionConfig mockConfig;
    
    private OracleConnector connector;
    
    @BeforeEach
    void setUp() {
        connector = new OracleConnector(mockConfig);
        
        // Setup mock behavior
        when(mockConfig.getConnectionUrl()).thenReturn("jdbc:oracle:thin:@localhost:1521/ORCL");
        when(mockConfig.getUsername()).thenReturn("testuser");
        when(mockConfig.getPassword()).thenReturn("testpass");
    }
    
    @Test
    void testConstructor() {
        assertNotNull(connector, "OracleConnector should be created successfully");
    }
    
    @Test
    void testGetConnectionWithInvalidDriver() {
        // This test verifies that the correct exception is thrown when the Oracle driver is not available
        assertThrows(SQLException.class, () -> {
            connector.getConnection();
        }, "Should throw SQLException when Oracle driver is not found");
    }
    
    @Test
    void testConfigurationUsage() throws SQLException {
        try {
            connector.getConnection();
        } catch (SQLException e) {
            // We expect an exception since we're not running against a real database
            // But we can still verify that our mock was called correctly
        }
        
        verify(mockConfig, times(1)).getConnectionUrl();
        verify(mockConfig, times(1)).getUsername();
        verify(mockConfig, times(1)).getPassword();
    }
} 